'''
Подвиг 7. (task_4.py)

С помощью наследования можно как бы "наполнять" дочерние классы нужными качествами (свойствами). Как пример, объявите в программе класс с именем:

Singleton

который бы позволял создавать только один экземпляр (все последующие экземпляры должны ссылаться на первый). Как это делать, вы должны уже знать из этого курса.

Затем, объявите еще один класс с именем:

Game

который бы наследовался от класса Singleton. Объекты класса Game должны создаваться командой:

game = Game(name)

где name - название игры (строка). В каждом объекте класса Game должен создаваться атрибут name с соответствующим содержимым.

Убедитесь, что атрибут name принимает значение первого созданного объекта (если это не так, то поправьте инициализатор дочернего класса, чтобы это условие выполнялось).

P.S. В программе нужно объявить только классы. Выводить на экран ничего не нужно.


'''


# СИНГЛТОН (с предотвращением замены значения атрибута при создании последубщих объектов).


class Singleton:
    __Single_obj = None

    def __new__(cls, *args, **kwargs):
        if cls.__Single_obj == None:
            cls.__Single_obj = super().__new__(cls)

        return cls.__Single_obj


class Game(Singleton):

    def __init__(self, name):
        if not hasattr(self, 'name'):
            self.name = name


# Для проверки.
gm = Game('my_game1')
print(gm.name, id(gm))

gm2 = Game('my_game2')
print(gm2.name, id(gm2))
